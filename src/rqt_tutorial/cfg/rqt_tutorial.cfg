#!/usr/bin/env python
# -*- coding: utf-8 -*-

PACKAGE = "rqt_tutorial"  # 指定为当前功能包的包名

from dynamic_reconfigure.parameter_generator_catkin import *  # 导入动态调参功能所需的库和工具

# 创建一个动态参数生成器的实例
# 相当于创建一个“参数工厂”，后面定义的所有动态参数都由这个工厂添加和管理
gen = ParameterGenerator()

# ===============================================================
# ------------------- A: 速度参数组 (speed) ----------------------
# ===============================================================

# 创建一个速度参数组
# 入参说明：
#   参数分组名：在配置文件中用于标识本组参数
#   显示方式：type="tab" 表示以标签页方式显示，适合参数较多时进行分类管理
#   默认展开状态：state=True 表示该组默认展开
speed_group = gen.add_group("A_speed", type="tab", state=True)

# 定义速度参数组中的两个参数
# 入参说明：
#   参数名：rqt中显示的参数名称
#   参数类型：例如 double_t 表示浮点数类型，int_t 表示整数类型
#   参数级别：用于决定参数的变化是否需要重新启动节点（0 表示不需要）
#   参数描述：鼠标悬停在参数名上时弹出的提示
#   初始值、最小值、最大值：用于限制调参范围
speed_group.add("speed_A", double_t, 0, "速度A", 1, 0, 10)
speed_group.add("speed_B", double_t, 0, "速度B", 2, 0, 10)

# ===============================================================
# ------------------- B: 位置参数组 (position) -------------------
# ===============================================================

# 创建一个位置参数组
# 与上面的速度参数组类似，同样使用标签页方式显示，默认展开
position_group = gen.add_group("B_position", type="tab", state=True)

# 定义位置参数组中的两个参数：X坐标和Y坐标
position_group.add("X_position", double_t, 0, "X坐标", 0.0, -10.0, 10.0)
position_group.add("Y_position", double_t, 0, "Y坐标", 0.0, -10.0, 10.0)

# ===============================================================
# ------------------ 最后：生成配置文件 --------------------------
# ===============================================================

# 入参说明：
#   包名：功能包名称
#   配置文件所在路径：一般与包名相同
#   类名：生成的配置类名

# 示例说明：
#   下述指令生成的配置文件为 rqt_tutorial.cfg
#   那么在 python 节点中导入配置类时写作：
#     from rqt_tutorial.cfg import rqt_tutorialConfig
#   当该节点加载这个配置类时，就拥有了这些参数的初始值、范围信息（自动定义并且初始化）
#   创建 rqt 动态调参的服务时，可以与 rqt_reconfigure 工具进行动态交互调参
exit(gen.generate(PACKAGE, "rqt_tutorial", "rqt_tutorial"))
